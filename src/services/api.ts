
// --- MOCKED API SERVICE ---
// In a real application, this would make a fetch request to the Node.js backend.
// To make the frontend demonstrable, we simulate the API response.

interface BriefRequest {
    jdText: string;
    role?: string;
    company?: string;
    botToken: string;
}

interface BriefResponse {
    shareUrl: string;
}

function triggerDownload(blob: Blob, filename: string) {
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.style.display = 'none';
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
}

// This function simulates creating a PDF file in the browser for download.
function createFakePdfBlob(): Blob {
    const text = "This is a dummy PDF file generated by the mocked frontend API.";
    return new Blob([text], { type: 'application/pdf' });
}


export const generateBrief = (request: BriefRequest): Promise<BriefResponse> => {
    console.log("Sending request to mocked API:", request);

    return new Promise((resolve, reject) => {
        // Simulate network delay
        setTimeout(() => {
            const companyName = request.company?.replace(/\s+/g, '-') || 'company';
            const roleName = request.role?.replace(/\s+/g, '-') || 'role';
            const date = new Date().toISOString().split('T')[0];
            const filename = `whyjosh-${companyName}-${roleName}-${date}.pdf`;

            // Simulate file download
            const fakePdf = createFakePdfBlob();
            triggerDownload(fakePdf, filename);

            // Simulate response with share URL
            const response: BriefResponse = {
                shareUrl: `https://storage.googleapis.com/whyjosh-briefs/briefs/mock_${Date.now()}.pdf`
            };
            
            resolve(response);

        }, 1000); // simulate 1 second for PDF generation and download
    });
};
